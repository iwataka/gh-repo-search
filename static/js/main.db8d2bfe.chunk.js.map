{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultSort","defaultPushed","defaultOrder","App","props","language","sort","pushed","perPage","order","state","repos","this","searchHandler","axios","get","then","searchAPIHandler","bind","res","setState","data","items","e","target","value","parseInt","nextView","darkTheme","createTheme","palette","type","ThemeProvider","theme","AppBar","position","Toolbar","Typography","variant","Container","maxWidth","CssBaseline","languageHandler","sortHandler","pushedHandler","perPageHandler","orderHandler","React","Component","GHRepoList","Grid","container","spacing","item","xs","TextField","required","label","defaultValue","onChange","id","ToggleButtonGroup","exclusive","ToggleButton","Button","color","onClick","map","repo","GHRepo","r","langChip","Chip","Card","CardContent","owner","login","name","description","icon","stargazers_count","forks_count","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8d2bfe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\nimport RestaurantIcon from \"@material-ui/icons/Restaurant\";\nimport Chip from \"@material-ui/core/Chip\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\n\nconst defaultLanguage = \"all\";\nconst defaultSort = \"stars\";\nconst defaultPushed = \">2021-01-01\";\nconst defaultPerPage = 10;\nconst defaultOrder = \"desc\";\n\ninterface GHAPIRepo {\n  id: number;\n  html_url: string;\n  owner: {\n    login: string;\n  };\n  name: string;\n  description: string;\n  forks_count: number;\n  stargazers_count: number;\n  language: string;\n}\n\ninterface GHAPISearchRepos {\n  data: {\n    items: Array<GHAPIRepo>;\n  };\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  private language = defaultLanguage;\n  private sort = defaultSort;\n  private pushed = defaultPushed;\n  private perPage = defaultPerPage;\n  private order = defaultOrder;\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      repos: [],\n    };\n  }\n\n  componentDidMount(): void {\n    this.searchHandler();\n  }\n\n  searchHandler(): void {\n    axios\n      .get(\n        `https://api.github.com/search/repositories?q=language:${this.language}+pushed:${this.pushed}&sort=${this.sort}&order=${this.order}&per_page=${this.perPage}`\n      )\n      .then(this.searchAPIHandler.bind(this));\n  }\n\n  private searchAPIHandler(res: GHAPISearchRepos): void {\n    this.setState({\n      repos: res.data.items,\n    });\n  }\n\n  languageHandler(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.language = e.target.value;\n  }\n\n  sortHandler(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.sort = e.target.value;\n  }\n\n  pushedHandler(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.pushed = e.target.value;\n  }\n\n  perPageHandler(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.perPage = parseInt(e.target.value, 10);\n  }\n\n  orderHandler(e: React.MouseEvent<HTMLElement>, nextView: string): void {\n    this.order = nextView;\n  }\n\n  render(): React.ReactNode {\n    const darkTheme = createTheme({\n      palette: {\n        type: \"dark\",\n      },\n    });\n    return (\n      <ThemeProvider theme={darkTheme}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">GitHub Repository Viewer</Typography>\n          </Toolbar>\n        </AppBar>\n        <br />\n        <Container maxWidth=\"md\">\n          <CssBaseline />\n          <GHRepoList\n            repos={this.state.repos}\n            searchHandler={this.searchHandler.bind(this)}\n            languageHandler={this.languageHandler.bind(this)}\n            sortHandler={this.sortHandler.bind(this)}\n            pushedHandler={this.pushedHandler.bind(this)}\n            perPageHandler={this.perPageHandler.bind(this)}\n            orderHandler={this.orderHandler.bind(this)}\n          />\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nclass AppProps {}\n\ninterface AppState {\n  repos: Array<GHAPIRepo>;\n}\n\nclass GHRepoList extends React.Component<GHRepoListProps, GHRepoListState> {\n  constructor(props: GHRepoListProps) {\n    super(props);\n    this.state = {\n      order: defaultOrder,\n    };\n  }\n\n  orderHandler(e: React.MouseEvent<HTMLElement>, nextView: string): void {\n    this.props.orderHandler(e, nextView);\n    this.setState({\n      order: nextView,\n    });\n  }\n\n  render() {\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography variant=\"h2\">Search Repositories</Typography>\n        </Grid>\n        <Grid item>\n          <TextField\n            required\n            label=\"language\"\n            defaultValue={defaultLanguage}\n            onChange={this.props.languageHandler}\n            id=\"language-input-field\"\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            required\n            label=\"sort\"\n            defaultValue={defaultSort}\n            onChange={this.props.sortHandler}\n            id=\"sort-input-field\"\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            required\n            label=\"pushed\"\n            defaultValue={defaultPushed}\n            onChange={this.props.pushedHandler}\n            id=\"pushed-input-field\"\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            required\n            type=\"number\"\n            label=\"number of repos\"\n            defaultValue={defaultPerPage}\n            onChange={this.props.perPageHandler}\n            id=\"perPage-input-field\"\n          />\n        </Grid>\n        <Grid item>\n          <ToggleButtonGroup\n            exclusive\n            value={this.state.order}\n            onChange={this.orderHandler.bind(this)}\n          >\n            <ToggleButton value=\"desc\">\n              <ArrowDownwardIcon />\n            </ToggleButton>\n            <ToggleButton value=\"asc\">\n              <ArrowUpwardIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={this.props.searchHandler}\n          >\n            Search\n          </Button>\n        </Grid>\n        {this.props.repos.map((repo) => (\n          <Grid item xs={12} key={repo.id}>\n            <GHRepo repo={repo} />\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n\ninterface GHRepoListProps {\n  repos: Array<GHAPIRepo>;\n  searchHandler: () => void;\n  languageHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  sortHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  pushedHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  perPageHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  orderHandler: (e: React.MouseEvent<HTMLElement>, nextView: string) => void;\n}\n\ninterface GHRepoListState {\n  order: string;\n}\n\nclass GHRepo extends React.Component<GHRepoProps> {\n  render() {\n    const r = this.props.repo;\n    let langChip = null;\n    if (r.language) {\n      langChip = <Chip label={r.language} />;\n    }\n    return (\n      <Card>\n        <CardContent>\n          <Typography variant=\"h5\">\n            {r.owner.login}/{r.name}\n          </Typography>\n          <Typography>{r.description}</Typography>\n          <br />\n          <Typography>\n            {langChip}\n            <Chip icon={<StarRateIcon />} label={r.stargazers_count} />\n            <Chip icon={<RestaurantIcon />} label={r.forks_count} />\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\ninterface GHRepoProps {\n  repo: GHAPIRepo;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}